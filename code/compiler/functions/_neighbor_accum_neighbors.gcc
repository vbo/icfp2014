; args: 2 local_vars
; return: rh cons-list of neighbor[s]
;   where neighbor is (((x=0, y=1), (val=3, dir=orig_neighbor.dir)), (list of crossing points))

!def ld_loc_cross  LD 0 0
!def st_loc_cross  ST 0 0
!def ld_loc_neighs_ac  LD 0 1
!def st_loc_neighs_ac  ST 0 1
!def ld_el  LD 1 0
!def ld_ac  LD 1 1
!def st_ac  ST 1 1
!def ld_map LD 2 0
!def get_point LD 1 0, CAR
!def get_dir   LD 1 0, CDR, CDR

#ld_ac
CAR
#st_loc_neighs_ac

#get_point
CAR
#inc ;x+1
#get_point
CDR
CONS
#ld_map
LDF @copy1back
AP 2
LDF @map_at
AP 2
    #call_copy ; counting number of ways out to determine if it's a cross
    LDF @is_walkable
    AP 1
    #ld_loc_cross
    ADD
    #st_loc_cross
#get_dir
CONS
CONS

#ld_loc_neighs_ac
CONS
#st_loc_neighs_ac

#get_point
CAR
#get_point
CDR
#inc ; y+1
CONS
#ld_map
LDF @copy1back
AP 2
LDF @map_at
AP 2
    #call_copy ; counting number of ways out to determine if it's a cross
    LDF @is_walkable
    AP 1
    #ld_loc_cross
    ADD
    #st_loc_cross
#get_dir
CONS
CONS

#ld_loc_neighs_ac
CONS
#st_loc_neighs_ac

#get_point
CAR
#dec ; x-1
#get_point
CDR
CONS
#ld_map
LDF @copy1back
AP 2
LDF @map_at
AP 2
    #call_copy ; counting number of ways out to determine if it's a cross
    LDF @is_walkable
    AP 1
    #ld_loc_cross
    ADD
    #st_loc_cross
#get_dir
CONS
CONS

#ld_loc_neighs_ac
CONS
#st_loc_neighs_ac

#get_point
CAR
#get_point
CDR
#dec ;y-1
CONS
#ld_map
LDF @copy1back
AP 2
LDF @map_at
AP 2
    #call_copy ; counting number of ways out to determine if it's a cross
    LDF @is_walkable
    AP 1
    #ld_loc_cross
    ADD
    #st_loc_cross
#get_dir
CONS
CONS

#ld_loc_neighs_ac
CONS

#ld_loc_cross
LDC 2
CGT
TSEL $cross $no_cross
$cross:
    #get_point
    #ld_ac
    CDR
    CONS
    CONS
    RTN
$no_cross:
    #ld_ac
    CDR
    CONS
    RTN
