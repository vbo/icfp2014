; args: 2d_array (map), neighbors, visited_crossings, last_wave_neighs, 1 local vars
; return: dir

!def ld_map                         LD 0 0
!def ld_neighbors                   LD 0 1
!def st_neighbors                   ST 0 1
!def ld_cross_visited               LD 0 2
!def st_cross_visited               ST 0 2
!def ld_last_visited                LD 0 3
!def st_last_visited                ST 0 3
!def ld_wave_num                    LD 0 4
!def ld_total_visited               LD 0 5
!def st_total_visited               ST 0 5
!def ld_loc_tasty                   LD 0 6
!def st_loc_tasty                   ST 0 6
!def ld_loc_new_last_visited        LD 0 7
!def st_loc_new_last_visited        ST 0 7
!def ld_self                        LD 1 2
!def ld_dir_up                      LD 1 3
!def st_dir_up                      ST 1 3
!def ld_dir_right                   LD 1 4
!def st_dir_right                   ST 1 4
!def ld_dir_down                    LD 1 5
!def st_dir_down                    ST 1 5
!def ld_dir_left                    LD 1 6
!def st_dir_left                    ST 1 6

; filter walkable neighs
#ld_neighbors
LDF @neighbor_accum_walkable
LDC 0
LDC 0
CONS
LDF @reduce
AP 3     ; get neighbors of walkable neighbors

#call_copy          ; get and add new visited
CDR
#ld_total_visited
ADD
#st_total_visited

CAR             ; get walkable from cons
#call_copy
#st_loc_new_last_visited

#st_neighbors

#ld_neighbors
LDF @neighbor_accum_add_profit
LDF @foreach
#call_copy ; we need to make the exact copy of foreach
AP 3

LDC #maximum_number_of_total_visited
#ld_total_visited
CGT
TSEL $cnt $rtn
$rtn:
    LDC -1
    RTN
$cnt:

#ld_neighbors
LDF @neighbor_accum_valuable
LDC 0
LDF @reduce
AP 3

#st_loc_tasty
#ld_loc_tasty

ATOM ; test for empty valuable neighs
TSEL $empty $some
$empty:
    #ld_map ; used for the recursive call of map_walk

    #ld_neighbors

    LDF @neighbor_accum_neighbors ; load new neighbors&crossings
    LDC 0
    LDC 0
    CONS
    LDF @reduce
    AP 3

    #call_copy
    CAR
    LDF @neighbor_accum_not_visited ; remove last visited wave
    LDC 0
    LDF @reduce
    AP 3

    #call_flip
    ; neighb&cr + filtered + map
    CDR

    ; cr + filtered  + map
    LDF @concat_accum
    #ld_cross_visited
    LDF @reduce ; new, func, old
    AP 3
    ; new_cross + filtered  + map
    #st_cross_visited
    ; filtered + map

    LDF @neighbor_accum_not_crossings ; remove visited crossings
    LDC 0
    LDF @reduce
    AP 3
    ; filtered + map

    #ld_cross_visited
    #ld_loc_new_last_visited
    #ld_wave_num
    #inc
    #ld_total_visited
    LDC 0 ; just for local var
    LDC 0 ; just for local var

    #ld_self
    AP 8

    RTN
$some:
    #ld_loc_tasty
    CAR
    CDR
    CDR
    RTN
