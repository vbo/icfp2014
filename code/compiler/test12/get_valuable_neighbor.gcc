; args: map, point
; return: point (neighbor which has pill, power_pill or fruit)
LD 0 0 ; get map

LD 0 1
CAR
LDC 1
ADD
LD 0 1
CDR
CONS ; getting point on the right

LDF @map_at ; getting value of the point right of interesting
AP 2

LDF @is_valuable ; check value
AP 1
TSEL $rtn_right $not_right
$rtn_right:
    LD 0 1
    CAR
    #inc
    LD 0 1
    CDR
    CONS ; getting point on the right of interesting
    RTN
$not_right:
    LD 0 0
    LD 0 1
    CAR
    LD 0 1
    CDR
    #inc
    CONS ; point on down

    LDF @map_at ; value
    AP 2
    LDF IS_VALUABLE
    AP 1
    TSEL $rtn_down $not_down
$rtn_down:
    LD 0 1
    CAR
    LD 0 1
    CDR
    #inc
    CONS
    RTN
$not_down:
    LD 0 0
    LD 0 1
    CAR
    #dec
    LD 0 1
    CDR
    CONS ; point on the left

    LDF @map_at
    AP 2
    LDF @is_valuable
    AP 1
    TSEL $rtn_left $not_left
$rtn_left:
    LD 0 1
    CAR
    #dec
    LD 0 1
    CDR
    CONS ; point on the left
    RTN
$not_left:
    LD 0 0
    LD 0 1
    CAR
    LD 0 1
    CDR
    #inc
    CONS ; point on up

    LDF @map_at
    AP 2
    LDF @is_valuable
    AP 1
    TSEL $rtn_up $rtn_null
$rtn_up:
    LD 0 1
    CAR
    LD 0 1
    CDR
    #dec
    CONS ; point on up
    RTN
$rtn_null:
    LDC 0
    RTN
